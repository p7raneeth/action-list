"""create new table users

Revision ID: 7811527b1c67
Revises: a3a72d1301d9
Create Date: 2025-09-28 00:58:41.409640

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7811527b1c67'
down_revision: Union[str, None] = 'a3a72d1301d9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('password', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('password'),
    sa.UniqueConstraint('username')
    )
    op.create_index(op.f('ix_user_id'), 'user', ['id'], unique=False)
    # op.drop_index('ix_tasks_id', table_name='tasks')
    # op.drop_table('tasks')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_table('tasks',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    # sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('completed', sa.BOOLEAN(), autoincrement=False, nullable=False),
    # sa.Column('priority', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    # sa.Column('due_date', sa.DATE(), autoincrement=False, nullable=True),
    # sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    # sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name='tasks_pkey')
    # )
    # op.create_index('ix_tasks_id', 'tasks', ['id'], unique=False)
    op.drop_index(op.f('ix_user_id'), table_name='user')
    op.drop_table('user')
    # ### end Alembic commands ###
